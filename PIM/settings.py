"""
Django settings for PIM project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__),".env"))
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-)1p(h4i8wd0jham0iwr2o0c_^z8sj&2f+w&7gzj8jf&ug3j1&k')  # Use env var in prod

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'  # Set via env var

ALLOWED_HOSTS = ['*']  # Use specific hosts in prod, e.g., ['pim-backend-rlia.onrender.com']

# Logging Configuration (enables MongoDB and custom logs)
import logging
import logging.config
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'level': 'INFO',  # Set to 'DEBUG' for more details locally
        },
    },
    'loggers': {
        'mongoengine': {  # MongoEngine logs
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'pymongo': {  # PyMongo connection logs
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'pymongo.server_selection': {  # Server discovery logs
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        '__main__': {  # Custom logs (e.g., connection success)
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
}
logging.config.dictConfig(LOGGING)

# MongoDB Connection with Logging
from mongoengine import connect, get_connection
from pymongo.errors import ConnectionFailure, ServerSelectionTimeoutError
from mongoengine.exceptions import ConnectionError as MongoEngineConnectionError

logger = logging.getLogger(__name__)  # Logs under the current module (settings)

try:
    db_name = os.getenv("MONGODB_COURSE_DB_NAME")
    host = os.getenv("MONGODB_HOST_1")
    
    if not db_name or not host:
        raise ValueError("Missing env vars: MONGODB_COURSE_DB_NAME or MONGODB_HOST_1")
    
    logger.info(f"Attempting MongoDB connection to host: {host}, db: {db_name}")
    
    # Connect (add auth if needed; see notes below)
    connection = connect(
        db=db_name,
        host=host,
        # Optional: Add these for better prod reliability
        # serverSelectionTimeoutMS=10000,  # 10s timeout for server selection
        # connectTimeoutMS=10000,          # 10s connection timeout
        # username=os.getenv('MONGO_USER'), # If auth required
        # password=os.getenv('MONGO_PASS'), # If auth required
        # authentication_source='admin',    # For Atlas/auth DB
    )
    
    # Success: Log details
    conn_alias = connection.name  # Usually 'default'
    conn_obj = get_connection(conn_alias)
    logger.info(f"✅ MongoDB connected successfully!")
    logger.info(f"   - Alias: {conn_alias}")
    logger.info(f"   - Host: {conn_obj.host}")
    logger.info(f"   - Port: {conn_obj.port}")
    logger.info(f"   - DB: {db_name}")
    logger.info(f"   - Max pool size: {conn_obj.max_pool_size}")
    
    # Optional: Light test query to verify access (uncomment if needed)
    # from pimApp.models import user  # Import your user model
    # logger.info(f"   - Test query: Found {len(list(user.objects.limit(1)))} documents in 'user' collection")
    
except (ConnectionFailure, ServerSelectionTimeoutError, MongoEngineConnectionError) as e:
    logger.error(f"❌ MongoDB connection failed: {e}")
    logger.error(f"   - Host: {host}, DB: {db_name}")
    raise  # Re-raise to prevent app startup with bad DB
except ValueError as e:
    logger.error(f"❌ MongoDB env var error: {e}")
    raise
except Exception as e:
    logger.error(f"❌ Unexpected MongoDB connection error: {e}")
    raise

# CORS and CSRF Settings
CORS_ALLOW_CREDENTIALS = True
CSRF_COOKIE_SECURE = os.getenv('CSRF_COOKIE_SECURE', 'False').lower() == 'true'  # False for local HTTP
SESSION_COOKIE_SECURE = os.getenv('SESSION_COOKIE_SECURE', 'False').lower() == 'true'  # False for local HTTP

CORS_ALLOW_HEADERS = [
    'user-login-id',
    'content-type',
]

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'selva@kmdigicommerce.com')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', 'ugrb gilv mqye nmam')  # Use app password; move to env

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"
REDIS_URL = os.getenv('REDIS_URL')
if REDIS_URL:
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': REDIS_URL,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'CONNECTION_POOL_KWARGS': {
                    'ssl_cert_reqs': None,  # For Upstash SSL
                },
            }
        }
    }
CSRF_COOKIE_SAMESITE = 'None'
SESSION_COOKIE_SAMESITE = "None"

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pimApp',
    'rest_framework',
    'cloudinary',
    'cloudinary_storage',
    'corsheaders',  # Required for CORS settings
]

# Cloudinary Config (move to env vars for prod)
import cloudinary
cloudinary.config( 
    cloud_name=os.getenv('CLOUDINARY_CLOUD_NAME', 'km-digi'), 
    api_key=os.getenv('CLOUDINARY_API_KEY', '987363492229394'), 
    api_secret=os.getenv('CLOUDINARY_API_SECRET', 'FbzaPNcYulOZgBdgX3LFAggCSv4'),
)

SHOPIFY_STORE = os.getenv("SHOPIFY_STORE")  # Removed trailing comma
SHOPIFY_ACCESS_TOKEN = os.getenv("SHOPIFY_ACCESS_TOKEN")  # Removed trailing comma
SHOPIFY_GRAPHQL_URL = os.getenv("SHOPIFY_GRAPHQL_URL")  # Removed trailing comma and space

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
MEDIA_URL = 'https://res.cloudinary.com/km-digi/'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'pimApp.custom_middleware.CustomMiddleware',
]

ROOT_URLCONF = 'PIM.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'PIM.wsgi.application'

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "https://pim-frontend-five.vercel.app"
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "https://pim-frontend-five.vercel.app"
]

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'